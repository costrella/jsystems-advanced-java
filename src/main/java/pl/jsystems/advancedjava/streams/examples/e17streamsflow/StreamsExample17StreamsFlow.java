package pl.jsystems.advancedjava.streams.examples.e17streamsflow;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

class StreamsExample17StreamsFlow
{
    private static final Logger LOGGER = LoggerFactory.getLogger(StreamsExample17StreamsFlow.class);
    private static int supplierCounter = 0;
    private static int mappingCounter = 0;

    public static void main(String[] args)
    {
        new StreamsExample17StreamsFlow().run();
    }

    private void run()
    {
        LOGGER.info("Oups, what now?!");

        Optional<Integer> someInt = Stream.generate(this::getNextInteger).limit(10)
                .map(this::simpleIdentityFunction)
                .map(this::mappingSomethingThrowingExceptions)
                .map(this::otherIdentityFunction)
                .findFirst();
        LOGGER.info("Not going to get here... Or am I? Result: {}", someInt);

        supplierCounter = 0;
        mappingCounter = 0;
        LOGGER.info("==========================");
        LOGGER.info("==========================");
        LOGGER.info("Collect all with additional limit");
        Set<Integer> allInts = Stream.generate(this::getNextInteger).limit(10)
                .map(this::simpleIdentityFunction)
                .limit(5)
                .map(this::mappingSomethingThrowingExceptions)
                .map(this::otherIdentityFunction)
                .collect(Collectors.toSet());
        LOGGER.info("Not going to get here... Or am I? Result: {}", allInts);

        supplierCounter = 0;
        mappingCounter = 0;
        LOGGER.info("==========================");
        LOGGER.info("==========================");
        LOGGER.info("Collect all generated by lists");
        Set<Integer> allIntegersFromLists = Stream.generate(this::getNextListOfIntegers).flatMap(List::stream).limit(10)
                .map(this::simpleIdentityFunction)
                .limit(5)
                .map(this::mappingSomethingThrowingExceptions)
                .map(this::otherIdentityFunction)
                .collect(Collectors.toSet());
        LOGGER.info("Not going to get here... Or am I? Result: {}", allIntegersFromLists);

        supplierCounter = 0;
        mappingCounter = 0;
        LOGGER.info("==========================");
        LOGGER.info("==========================");
        LOGGER.info("Collect all");
        allInts = Stream.generate(this::getNextInteger).limit(10)
                .map(this::simpleIdentityFunction)
                .map(this::mappingSomethingThrowingExceptions)
                .map(this::otherIdentityFunction)
                .collect(Collectors.toSet());
        LOGGER.info("Not going to get here... Or am I? Result: {}", allInts);
    }

    private Integer getNextInteger()
    {
        LOGGER.info("==========================");
        LOGGER.info("Generating integer: " + ++supplierCounter);
        return supplierCounter;
    }

    private List<Integer> getNextListOfIntegers()
    {
        LOGGER.info("==========================");
        LOGGER.info("Generating integer list: " + ++supplierCounter);
        return List.of(supplierCounter, ++supplierCounter, ++supplierCounter, ++supplierCounter, ++supplierCounter, ++supplierCounter);
    }

    private <T> T simpleIdentityFunction(T input)
    {
        LOGGER.info("Simple identity mapping for: {}", input);
        return input;
    }

    private <T> T otherIdentityFunction(T input)
    {
        LOGGER.info("Other identity mapping for: {}", input);
        return input;
    }

    private <T> T mappingSomethingThrowingExceptions(T input)
    {
        LOGGER.info("Mapping with exceptions: {}", input);
        if (++mappingCounter > 5)
        {
            throw new IllegalStateException("Cannot map this: " + input);
        }
        return input;
    }
}
